// Code generated by protoc-gen-go.
// source: periodic.proto
// DO NOT EDIT!

package hello

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type PeriodicData struct {
	UnixTime                     *int32 `protobuf:"varint,1,opt,name=unix_time" json:"unix_time,omitempty"`
	Light                        *int32 `protobuf:"varint,2,opt,name=light" json:"light,omitempty"`
	Temperature                  *int32 `protobuf:"varint,3,opt,name=temperature" json:"temperature,omitempty"`
	Humidity                     *int32 `protobuf:"varint,4,opt,name=humidity" json:"humidity,omitempty"`
	Dust                         *int32 `protobuf:"varint,5,opt,name=dust" json:"dust,omitempty"`
	LightVariability             *int32 `protobuf:"varint,8,opt,name=light_variability" json:"light_variability,omitempty"`
	LightTonality                *int32 `protobuf:"varint,9,opt,name=light_tonality" json:"light_tonality,omitempty"`
	DustVariability              *int32 `protobuf:"varint,13,opt,name=dust_variability" json:"dust_variability,omitempty"`
	DustMax                      *int32 `protobuf:"varint,14,opt,name=dust_max" json:"dust_max,omitempty"`
	DustMin                      *int32 `protobuf:"varint,15,opt,name=dust_min" json:"dust_min,omitempty"`
	WaveCount                    *int32 `protobuf:"varint,16,opt,name=wave_count" json:"wave_count,omitempty"`
	HoldCount                    *int32 `protobuf:"varint,17,opt,name=hold_count" json:"hold_count,omitempty"`
	AudioNumDisturbances         *int32 `protobuf:"varint,18,opt,name=audio_num_disturbances" json:"audio_num_disturbances,omitempty"`
	AudioPeakDisturbanceEnergyDb *int32 `protobuf:"varint,19,opt,name=audio_peak_disturbance_energy_db" json:"audio_peak_disturbance_energy_db,omitempty"`
	AudioPeakBackgroundEnergyDb  *int32 `protobuf:"varint,20,opt,name=audio_peak_background_energy_db" json:"audio_peak_background_energy_db,omitempty"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *PeriodicData) Reset()         { *m = PeriodicData{} }
func (m *PeriodicData) String() string { return proto.CompactTextString(m) }
func (*PeriodicData) ProtoMessage()    {}

func (m *PeriodicData) GetUnixTime() int32 {
	if m != nil && m.UnixTime != nil {
		return *m.UnixTime
	}
	return 0
}

func (m *PeriodicData) GetLight() int32 {
	if m != nil && m.Light != nil {
		return *m.Light
	}
	return 0
}

func (m *PeriodicData) GetTemperature() int32 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *PeriodicData) GetHumidity() int32 {
	if m != nil && m.Humidity != nil {
		return *m.Humidity
	}
	return 0
}

func (m *PeriodicData) GetDust() int32 {
	if m != nil && m.Dust != nil {
		return *m.Dust
	}
	return 0
}

func (m *PeriodicData) GetLightVariability() int32 {
	if m != nil && m.LightVariability != nil {
		return *m.LightVariability
	}
	return 0
}

func (m *PeriodicData) GetLightTonality() int32 {
	if m != nil && m.LightTonality != nil {
		return *m.LightTonality
	}
	return 0
}

func (m *PeriodicData) GetDustVariability() int32 {
	if m != nil && m.DustVariability != nil {
		return *m.DustVariability
	}
	return 0
}

func (m *PeriodicData) GetDustMax() int32 {
	if m != nil && m.DustMax != nil {
		return *m.DustMax
	}
	return 0
}

func (m *PeriodicData) GetDustMin() int32 {
	if m != nil && m.DustMin != nil {
		return *m.DustMin
	}
	return 0
}

func (m *PeriodicData) GetWaveCount() int32 {
	if m != nil && m.WaveCount != nil {
		return *m.WaveCount
	}
	return 0
}

func (m *PeriodicData) GetHoldCount() int32 {
	if m != nil && m.HoldCount != nil {
		return *m.HoldCount
	}
	return 0
}

func (m *PeriodicData) GetAudioNumDisturbances() int32 {
	if m != nil && m.AudioNumDisturbances != nil {
		return *m.AudioNumDisturbances
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakDisturbanceEnergyDb() int32 {
	if m != nil && m.AudioPeakDisturbanceEnergyDb != nil {
		return *m.AudioPeakDisturbanceEnergyDb
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakBackgroundEnergyDb() int32 {
	if m != nil && m.AudioPeakBackgroundEnergyDb != nil {
		return *m.AudioPeakBackgroundEnergyDb
	}
	return 0
}

type BatchedPeriodicData struct {
	Data             []*PeriodicData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	DeviceId         *string         `protobuf:"bytes,2,req,name=device_id" json:"device_id,omitempty"`
	FirmwareVersion  *int32          `protobuf:"varint,3,req,name=firmware_version" json:"firmware_version,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *BatchedPeriodicData) Reset()         { *m = BatchedPeriodicData{} }
func (m *BatchedPeriodicData) String() string { return proto.CompactTextString(m) }
func (*BatchedPeriodicData) ProtoMessage()    {}

func (m *BatchedPeriodicData) GetData() []*PeriodicData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BatchedPeriodicData) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *BatchedPeriodicData) GetFirmwareVersion() int32 {
	if m != nil && m.FirmwareVersion != nil {
		return *m.FirmwareVersion
	}
	return 0
}

func init() {
}
